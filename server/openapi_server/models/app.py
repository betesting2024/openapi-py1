from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class App(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, tag=None, app_id=None):  # noqa: E501
        """App - a model defined in OpenAPI

        :param name: The name of this App.  # noqa: E501
        :type name: str
        :param tag: The tag of this App.  # noqa: E501
        :type tag: str
        :param app_id: The app_id of this App.  # noqa: E501
        :type app_id: int
        """
        self.openapi_types = {
            'name': str,
            'tag': str,
            'app_id': int
        }

        self.attribute_map = {
            'name': 'name',
            'tag': 'tag',
            'app_id': 'appId'
        }

        self._name = name
        self._tag = tag
        self._app_id = app_id

    @classmethod
    def from_dict(cls, dikt) -> 'App':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The App of this App.  # noqa: E501
        :rtype: App
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this App.


        :return: The name of this App.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this App.


        :param name: The name of this App.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def tag(self) -> str:
        """Gets the tag of this App.


        :return: The tag of this App.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag: str):
        """Sets the tag of this App.


        :param tag: The tag of this App.
        :type tag: str
        """

        self._tag = tag

    @property
    def app_id(self) -> int:
        """Gets the app_id of this App.


        :return: The app_id of this App.
        :rtype: int
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id: int):
        """Sets the app_id of this App.


        :param app_id: The app_id of this App.
        :type app_id: int
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")  # noqa: E501

        self._app_id = app_id
